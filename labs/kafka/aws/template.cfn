{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Kafka broker instances for the deployment",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "Deployment": {
            "Description": "Deployment in which the instances belong",
            "Type": "String"
        },
        "Environment": {
            "Description": "Environment in which the instances belong",
            "Type": "String"
        },
        "VpcId": {
            "Description": "ID of the VPC",
            "Type": "String"
        },
        "AvailabilityZone": {
            "Description": "Availability zone of the subnets",
            "Type": "String"
        },
        "PrivateSubnetId": {
            "Description": "ID of the private subnet",
            "Type": "String"
        },
        "NumberOfNodes": {
            "Description": "Number of kafka nodes to be deployed",
            "Type": "String",
            "Default": "1"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.xlarge",
                "c3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KafkaUrl": {
            "Description": "Kafka version to be deployed",
            "Type": "String",
            "Default": ""
        },
        "ZookeeperVersion": {
            "Description": "Zookeeper version to be deployed if no external zookeeper servers found",
            "Type": "String"
        },
        "AsgTopicArn": {
            "Description": "Topic ARN that the auto-scaling group should use to send notifications",
            "Type": "String"
        },
        "RoleName": {
            "Description": "Name of IAM role to use with instance profile",
            "Type": "String"
        },
        "Virtualization": {
            "Description": "Virtualization type(hvm or paravirt) of image to be deployed",
            "Type": "String"
        }
    },
    "Mappings": {
        "UbuntuTrustyAmi": {
            "us-east-1": {
                "hvm": "ami-cc5229a4",
                "paravirt": "ami-d0ba0cb8"
            }
        }
    },
    "Resources": {
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "RoleName"
                } ]
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "UbuntuTrustyAmi",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "Virtualization"
                        }
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "PrivateSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\n",
                                "exec &> >(tee /var/log/user-data.log)\n",
                                "\n",
                                "echo BEGIN\n",
                                "\n",
                                "REGION=\"", { "Ref": "AWS::Region" }, "\"\n",
                                "DEPLOYMENT=\"", { "Ref": "Deployment" }, "\"\n",
                                "ENVIRONMENT=\"", { "Ref": "Environment" }, "\"\n",
                                "KAFKA_URL=\"", { "Ref": "KafkaUrl" }, "\"\n",
                                "ZK_VERSION=\"", { "Ref": "ZookeeperVersion" }, "\"\n",
                                "INSTANCE_WAIT_HANDLE_URL=\"", { "Ref": "WaitForInstanceWaitHandle" }, "\"\n",
                                "\n",
                                "WORKING_DIR=\"/deploy\"\n",
                                "REPO_DIR=\"$WORKING_DIR/repo\"\n",
                                "LAB_PATH=\"labs/kafka\"\n",
                                "INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                                "RUBY_URL=\"https://rvm_io.global.ssl.fastly.net/binaries/ubuntu/14.04/x86_64/ruby-2.1.5.tar.bz2\"\n",
                                "\n",
                                "# Update repos and install dependencies\n",
                                "apt-get update\n",
                                "apt-get -y install git-core build-essential awscli\n",
                                "\n",
                                "# Install rvm for the latest ruby version\n",
                                "command curl -sSL https://rvm.io/mpapis.asc | gpg --import -\n",
                                "curl -sSL https://get.rvm.io | bash -s stable\n",
                                "source /usr/local/rvm/scripts/rvm\n",
                                "echo \"$RUBY_URL=1a201d082586036092cfc5b79dd26718\" >> /usr/local/rvm/user/md5\n",
                                "echo \"$RUBY_URL=91216074cb5f66ef5e33d47e5d3410148cc672dc73cc0d9edff92e00d20c9973bec7ab21a3462ff4e9ff9b23eff952e83b51b96a3b11cb5c23be587046eb0c57\" >> /usr/local/rvm/user/sha512\n",
                                "rvm mount -r $RUBY_URL --verify-downloads 1\n",
                                "rvm use 2.1 --default\n",
                                "rvm rubygems current\n",
                                "\n",
                                "# Get latest version of jq\n",
                                "wget https://stedolan.github.io/jq/download/linux64/jq -O /usr/local/bin/jq\n",
                                "chmod +x /usr/local/bin/jq\n",
                                "\n",
                                "git clone https://git@github.com/stealthly/minotaur.git \"$REPO_DIR\"\n",
                                "\n",
                                "# Install Chef\n",
                                "curl -L https://www.opscode.com/chef/install.sh | bash\n",
                                "\n",
                                "# Install Bundler and community cookbooks with librarian\n",
                                "aws s3 cp --region $REGION s3://bdoss-deploy/gems/librarian-0.1.2.gem /tmp/librarian-0.1.2.gem\n",
                                "gem install /tmp/librarian-0.1.2.gem --no-ri --no-rdoc\n",
                                "gem install bundler --no-ri --no-rdoc\n",
                                "cd $REPO_DIR/$LAB_PATH/chef/ && bundle install && librarian-chef install\n",
                                "\n",
                                "# Find kafka nodes that belong to the same deployment and environment\n",
                                "NODES_FILTER=\"Name=tag:Name,Values=kafka.$DEPLOYMENT.$ENVIRONMENT\"\n",
                                "QUERY=\"Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress\"\n",
                                "KAFKA_BROKERS=$(aws ec2 describe-instances --region \"$REGION\" --filters \"$NODES_FILTER\" --query \"$QUERY\" | jq --raw-output 'join(\",\")')\n",
                                "\n",
                                "# Find zookeeper nodes that belong to the same deployment and environment\n",
                                "NODES_FILTER=\"Name=tag:Name,Values=zookeeper.$DEPLOYMENT.$ENVIRONMENT\"\n",
                                "QUERY=\"Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress\"\n",
                                "ZK_SERVERS=$(aws ec2 describe-instances --region \"$REGION\" --filters \"$NODES_FILTER\" --query \"$QUERY\" | jq --raw-output 'join(\",\")')\n",
                                "\n",
                                "# Run Chef\n",
                                "kafka_url=\"$KAFKA_URL\" \\\n",
                                "zk_version=\"$ZK_VERSION\" \\\n",
                                "zk_servers=\"$ZK_SERVERS\" \\\n",
                                "kafka_brokers=$\"$KAFKA_BROKERS\" \\\n",
                                "chef-solo -c \"$REPO_DIR/$LAB_PATH/chef/solo.rb\" -j \"$REPO_DIR/$LAB_PATH/chef/solo_kb.json\"\n",
                                "\n",
                                "# Create default topics, such as \"dataset\" and \"mirror_dataset\"\n",
                                "sleep 15\n",
                                "/opt/apache/kafka/bin/kafka-topics.sh --create --topic dataset --partitions 1 --replication-factor 1 --zookeeper $(expr $ZK_SERVERS : '\\([0-9\\.]*\\)')\n",
                                "/opt/apache/kafka/bin/kafka-topics.sh --create --topic mirror_dataset --partitions 1 --replication-factor 1 --zookeeper $(expr $ZK_SERVERS : '\\([0-9\\.]*\\)')\n",
                                "\n",
                                "# Notify wait handle\n",
                                "WAIT_HANDLE_JSON=\"{\\\"Status\\\": \\\"SUCCESS\\\", \\\"Reason\\\": \\\"Done\\\", \\\"UniqueId\\\": \\\"1\\\", \\\"Data\\\": \\\"$INSTANCE_ID\\\"}\"\n",
                                "curl -X PUT -H 'Content-Type:' --data-binary \"$WAIT_HANDLE_JSON\" \"$INSTANCE_WAIT_HANDLE_URL\"\n",
                                "\n",
                                "echo END\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnetId"
                    }
                ],
                "AvailabilityZones": [
                    {
                        "Ref": "AvailabilityZone"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "DesiredCapacity": {
                    "Ref": "NumberOfNodes"
                },
                "MinSize": {
                    "Ref": "NumberOfNodes"
                },
                "MaxSize": {
                    "Ref": "NumberOfNodes"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "AsgTopicArn"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
                                    "kafka",
                                    {
                                        "Ref": "Deployment"
                                    },
                                    {
                                        "Ref": "Environment"
                                    }
                                ]
                            ]
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "PrivateSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable private access to the kafka host, allow traffic to/from ephemeral ports and http(s) traffic",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1024",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },                   
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1024",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WaitForInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {
            }
        },
        "WaitForInstance": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "InstanceGroup",
            "Properties": {
                "Handle": {
                    "Ref": "WaitForInstanceWaitHandle"
                },
                "Timeout": "1200"
            }
        }
    }
}
